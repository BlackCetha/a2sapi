package steam

import (
	"strings"
	"testing"
)

func TestParseRuleInfo(t *testing.T) {
	data := []byte{
		0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x2A, 0x00, 0x63, 0x61, 0x70, 0x74, 0x75,
		0x72, 0x65, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x38, 0x00, 0x64, 0x6D,
		0x66, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x32, 0x38, 0x00, 0x66, 0x72, 0x61,
		0x67, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x35, 0x30, 0x00, 0x67, 0x5F,
		0x61, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6F,
		0x72, 0x65, 0x42, 0x6F, 0x6E, 0x75, 0x73, 0x00, 0x33, 0x00, 0x67, 0x5F,
		0x61, 0x64, 0x45, 0x6C, 0x69, 0x6D, 0x53, 0x63, 0x6F, 0x72, 0x65, 0x42,
		0x6F, 0x6E, 0x75, 0x73, 0x00, 0x32, 0x00, 0x67, 0x5F, 0x61, 0x64, 0x54,
		0x6F, 0x75, 0x63, 0x68, 0x53, 0x63, 0x6F, 0x72, 0x65, 0x42, 0x6F, 0x6E,
		0x75, 0x73, 0x00, 0x31, 0x00, 0x67, 0x5F, 0x62, 0x6C, 0x75, 0x65, 0x53,
		0x63, 0x6F, 0x72, 0x65, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x63, 0x75, 0x73,
		0x74, 0x6F, 0x6D, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x00,
		0x30, 0x00, 0x67, 0x5F, 0x66, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x00,
		0x63, 0x61, 0x00, 0x67, 0x5F, 0x66, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x79,
		0x54, 0x69, 0x74, 0x6C, 0x65, 0x00, 0x43, 0x6C, 0x61, 0x6E, 0x20, 0x41,
		0x72, 0x65, 0x6E, 0x61, 0x00, 0x67, 0x5F, 0x66, 0x72, 0x65, 0x65, 0x7A,
		0x65, 0x52, 0x6F, 0x75, 0x6E, 0x64, 0x44, 0x65, 0x6C, 0x61, 0x79, 0x00,
		0x34, 0x30, 0x30, 0x30, 0x00, 0x67, 0x5F, 0x67, 0x61, 0x6D, 0x65, 0x53,
		0x74, 0x61, 0x74, 0x65, 0x00, 0x50, 0x52, 0x45, 0x5F, 0x47, 0x41, 0x4D,
		0x45, 0x00, 0x67, 0x5F, 0x67, 0x61, 0x6D, 0x65, 0x74, 0x79, 0x70, 0x65,
		0x00, 0x34, 0x00, 0x67, 0x5F, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
		0x00, 0x38, 0x30, 0x30, 0x00, 0x67, 0x5F, 0x69, 0x6E, 0x73, 0x74, 0x61,
		0x47, 0x69, 0x62, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x69, 0x74, 0x65, 0x6D,
		0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x33, 0x35, 0x00, 0x67, 0x5F,
		0x69, 0x74, 0x65, 0x6D, 0x54, 0x69, 0x6D, 0x65, 0x72, 0x73, 0x00, 0x31,
		0x00, 0x67, 0x5F, 0x6C, 0x65, 0x76, 0x65, 0x6C, 0x53, 0x74, 0x61, 0x72,
		0x74, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x31, 0x34, 0x35, 0x31, 0x39, 0x34,
		0x38, 0x30, 0x34, 0x34, 0x00, 0x67, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x6F,
		0x75, 0x74, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x6E, 0x65, 0x65, 0x64, 0x70,
		0x61, 0x73, 0x73, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x6F, 0x76, 0x65, 0x72,
		0x74, 0x69, 0x6D, 0x65, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x71, 0x75, 0x61,
		0x64, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6F,
		0x72, 0x00, 0x33, 0x00, 0x67, 0x5F, 0x72, 0x65, 0x64, 0x53, 0x63, 0x6F,
		0x72, 0x65, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x72, 0x6F, 0x75, 0x6E, 0x64,
		0x57, 0x61, 0x72, 0x6D, 0x75, 0x70, 0x44, 0x65, 0x6C, 0x61, 0x79, 0x00,
		0x31, 0x30, 0x30, 0x30, 0x30, 0x00, 0x67, 0x5F, 0x73, 0x74, 0x61, 0x72,
		0x74, 0x69, 0x6E, 0x67, 0x48, 0x65, 0x61, 0x6C, 0x74, 0x68, 0x00, 0x32,
		0x30, 0x30, 0x00, 0x67, 0x5F, 0x74, 0x65, 0x61, 0x6D, 0x46, 0x6F, 0x72,
		0x63, 0x65, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x31, 0x00,
		0x67, 0x5F, 0x74, 0x65, 0x61, 0x6D, 0x53, 0x69, 0x7A, 0x65, 0x4D, 0x69,
		0x6E, 0x00, 0x31, 0x00, 0x67, 0x5F, 0x74, 0x69, 0x6D, 0x65, 0x6F, 0x75,
		0x74, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x00, 0x30, 0x00, 0x67, 0x5F, 0x76,
		0x6F, 0x74, 0x65, 0x46, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x30, 0x00, 0x67,
		0x5F, 0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x52, 0x65, 0x73, 0x70, 0x61,
		0x77, 0x6E, 0x00, 0x35, 0x00, 0x6D, 0x61, 0x70, 0x6E, 0x61, 0x6D, 0x65,
		0x00, 0x6F, 0x76, 0x65, 0x72, 0x6B, 0x69, 0x6C, 0x6C, 0x00, 0x6D, 0x65,
		0x72, 0x63, 0x79, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x30, 0x00, 0x70,
		0x72, 0x6F, 0x74, 0x6F, 0x63, 0x6F, 0x6C, 0x00, 0x39, 0x31, 0x00, 0x72,
		0x6F, 0x75, 0x6E, 0x64, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x31, 0x30,
		0x00, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x74, 0x69, 0x6D, 0x65, 0x6C, 0x69,
		0x6D, 0x69, 0x74, 0x00, 0x31, 0x38, 0x30, 0x00, 0x73, 0x63, 0x6F, 0x72,
		0x65, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x31, 0x35, 0x30, 0x00, 0x73,
		0x76, 0x5F, 0x68, 0x6F, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x72,
		0x61, 0x7A, 0x6F, 0x72, 0x2E, 0x73, 0x79, 0x6E, 0x63, 0x6F, 0x72, 0x65,
		0x2E, 0x6F, 0x72, 0x67, 0x20, 0x7C, 0x20, 0x55, 0x53, 0x2D, 0x57, 0x65,
		0x73, 0x74, 0x20, 0x23, 0x31, 0x20, 0x7C, 0x20, 0x43, 0x6F, 0x6D, 0x70,
		0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x00, 0x73, 0x76, 0x5F, 0x6D,
		0x61, 0x78, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x31, 0x36,
		0x00, 0x73, 0x76, 0x5F, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
		0x6C, 0x69, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x30, 0x00, 0x74, 0x65, 0x61,
		0x6D, 0x73, 0x69, 0x7A, 0x65, 0x00, 0x34, 0x00, 0x74, 0x69, 0x6D, 0x65,
		0x6C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x30, 0x00, 0x76, 0x65, 0x72, 0x73,
		0x69, 0x6F, 0x6E, 0x00, 0x31, 0x30, 0x36, 0x36, 0x20, 0x6C, 0x69, 0x6E,
		0x75, 0x78, 0x2D, 0x78, 0x36, 0x34, 0x20, 0x44, 0x65, 0x63, 0x20, 0x31,
		0x37, 0x20, 0x32, 0x30, 0x31, 0x35, 0x20, 0x31, 0x35, 0x3A, 0x33, 0x36,
		0x3A, 0x34, 0x39, 0x00}

	rules, err := parseRuleInfo(data)
	if err != nil {
		t.Fatalf("Unexpected error when parsing rule info")
	}
	if len(rules) != 42 {
		t.Fatalf("Expected 42 rules, got: %d", len(rules))
	}
	if _, ok := rules["protocol"]; !ok {
		t.Fatalf("Expected protocol rule to exist")
	}
	if !strings.EqualFold(rules["protocol"], "91") {
		t.Fatalf("Expected protocol to be 91, got: %s", rules["protocol"])
	}
	if _, ok := rules["g_factory"]; !ok {
		t.Fatalf("Expected g_factory rule to exist")
	}
	if !strings.EqualFold(rules["g_factory"], "ca") {
		t.Fatalf("Expected g_factory to be ca, got: %s", rules["g_factory"])
	}
	if _, ok := rules["sv_hostname"]; !ok {
		t.Fatalf("Expected sv_hostname rule to exist")
	}
	if !strings.EqualFold(rules["sv_hostname"],
		"razor.syncore.org | US-West #1 | Competitive") {
		t.Fatalf(
			"Expected sv_hostname to be razor.syncore.org | US-West #1 | Competitive, got: %s",
			rules["sv_hostname"])
	}

}
